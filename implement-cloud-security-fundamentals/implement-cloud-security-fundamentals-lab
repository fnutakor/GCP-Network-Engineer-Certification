Implement Cloud Security Fundamentals on Google Cloud Challenge Lab
Overview
This lab is part of GCP - Google Cloud Professional Cloud Network Engineer course. Below, I describe the steps I took to complete the "Implement Cloud Security Fundamentals on Google Cloud" Challenge Lab.

Challenge Scenario
I was tasked with setting up a secure Kubernetes Engine private cluster for Jooli Inc.’s Orca development team. The key objectives were:

Create a Service Account with Minimal Permissions:
I needed to ensure the cluster was deployed using a service account that only had the necessary permissions (least privilege). This is important for security because it limits the potential damage if the account is compromised.

Deploy a Private Kubernetes Cluster:
The cluster had to be private, meaning it wouldn't have a public endpoint accessible over the internet. Instead, access was restricted to a specific IP address used by the Orca team’s management jumphost.

Assign Custom IAM Roles:
The service account needed additional permissions to manage objects in Google Cloud Storage. I had to create a custom IAM role for this and assign it to the service account.

Step-by-Step Solution
1. Set Up Environment Variables
First, I set up environment variables in CloudShell to make the following commands easier to execute:

bash
Copy code
export CUSTOM_ROLE="GCSObjectManager"
export S_A="orca-k8s-sa"
export CLUSTER="orca-private-cluster"
export ZONE="us-central1-a"
These variables store the names of the custom role, service account, cluster, and the zone where the cluster will be deployed.

2. Create and Assign a Service Account
Next, I created a service account named orca-k8s-sa and assigned it the necessary roles for monitoring and logging:

bash
Copy code
gcloud iam service-accounts create $S_A --display-name "Orca K8s Service Account"

gcloud projects add-iam-policy-binding [PROJECT_ID] \
  --member="serviceAccount:$S_A@[PROJECT_ID].iam.gserviceaccount.com" \
  --role="roles/monitoring.viewer"

gcloud projects add-iam-policy-binding [PROJECT_ID] \
  --member="serviceAccount:$S_A@[PROJECT_ID].iam.gserviceaccount.com" \
  --role="roles/monitoring.metricWriter"

gcloud projects add-iam-policy-binding [PROJECT_ID] \
  --member="serviceAccount:$S_A@[PROJECT_ID].iam.gserviceaccount.com" \
  --role="roles/logging.logWriter"
These roles ensure the service account can perform basic monitoring and logging tasks.

3. Create a Custom IAM Role for Storage Access
I needed to allow the service account to manage objects in Google Cloud Storage, so I created a custom role with the required permissions:

bash
Copy code
gcloud iam roles create $CUSTOM_ROLE --project=[PROJECT_ID] \
  --title="GCS Object Manager" \
  --description="Role to manage GCS objects" \
  --permissions="storage.objects.create,storage.objects.update"

gcloud projects add-iam-policy-binding [PROJECT_ID] \
  --member="serviceAccount:$S_A@[PROJECT_ID].iam.gserviceaccount.com" \
  --role="projects/[PROJECT_ID]/roles/$CUSTOM_ROLE"
4. Deploy the Kubernetes Engine Private Cluster
I then deployed a private Kubernetes Engine cluster with the public endpoint disabled and access restricted to the Orca management jumphost’s IP address:

bash
Copy code
gcloud container clusters create $CLUSTER \
  --zone $ZONE \
  --no-enable-public-endpoint \
  --enable-private-nodes \
  --master-authorized-networks [Jumphost-IP-Address]/32 \
  --network "orca-build-vpc" \
  --subnetwork "orca-build-subnet" \
  --service-account "$S_A@[PROJECT_ID].iam.gserviceaccount.com"
This configuration ensures that the cluster is secure and only accessible from the designated IP address.

5. Verify the Deployment
Finally, I verified that the cluster was successfully deployed and that it was functioning correctly:

bash
Copy code
gcloud container clusters get-credentials $CLUSTER --zone $ZONE

kubectl get nodes
I also deployed a simple Nginx application to test the cluster’s functionality:

bash
Copy code
kubectl create deployment nginx --image=nginx
kubectl expose deployment nginx --port=80 --type=LoadBalancer
This confirmed that the cluster was working as expected and that the security settings were correctly applied.

Conclusion
Completing this lab allowed me to demonstrate my ability to secure a Kubernetes Engine cluster on Google Cloud, applying both best practices in security and practical skills in cloud infrastructure management. This lab is part of my portfolio to show employers that I have hands-on experience with Google Cloud technologies and can handle complex security configurations.
